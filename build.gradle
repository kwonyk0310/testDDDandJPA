plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '2.7.9'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'name.remal.sonarlint' version '1.4.1'
    id "org.sonarqube" version "2.7"
    id 'jacoco'
    id "com.github.davidmc24.gradle.plugin.avro" version "1.3.0"
    id "com.github.spotbugs" version "4.7.5"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

ext {
    lombokVersion = '1.18.24'
    lombokMapstructBindVersion = '0.2.0'
    mapStructVersion = '1.5.2.Final'
    // [2021-12-30] log4j2 security issue hot fix (2.17.0->2.17.1)
    set('log4j2.version', '2.17.2')
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    implementation {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
        all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    complie {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }
    all {
        exclude group: 'log4j', module: 'log4j'
    }
}

ext {
    querydslVersion = '5.0.0'

    // [2021-12-30] log4j2 security issue hot fix (2.17.0->2.17.1)
    set('log4j2.version', '2.17.1')

}

repositories {
    mavenCentral()
}

dependencies {

    compileOnly 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'commons-net:commons-net:3.8.0'
    implementation 'net.sf.json-lib:json-lib:2.4:jdk15'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // commons io
    implementation 'commons-io:commons-io:2.4'

    // apache
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    // commons-httpclient
    implementation 'commons-httpclient:commons-httpclient:3.1'

    //DB
    runtimeOnly 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.vladmihalcea:hibernate-types-55:2.19.2'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:2.1.3'
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.7.6'
    // commons-httpclient
    implementation 'commons-httpclient:commons-httpclient:3.1'

    // test
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    // SpotBugs
    implementation "com.github.spotbugs:spotbugs-annotations:4.7.1"
    annotationProcessor 'com.github.spotbugs:spotbugs-annotations:4.7.1'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'

    // QueryDSL
//    implementation group: 'com.querydsl', name: 'querydsl-jpa', version: querydslVersion
//    implementation group: 'com.querydsl', name: 'querydsl-apt', version: querydslVersion
//    implementation group: 'com.querydsl', name: 'querydsl-core', version: querydslVersion
//
//    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
//    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
//    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
//    annotationProcessor group: 'com.querydsl', name: 'querydsl-apt', version: querydslVersion
//    annotationProcessor group: 'com.querydsl', name: 'querydsl-apt', version: querydslVersion, classifier: 'jpa'


    /**************** MapStruct ******************/

    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    annotationProcessor "org.mapstruct:mapstruct-processor:1.4.2.Final"
    // lombok 에서 mapstruct binding 해주는 기능이 추가되었습니다.!
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
//    implementation "org.mapstruct:mapstruct:${mapStructVersion}"
//    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}", "org.projectlombok:lombok:${lombokVersion}", "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindVersion}"
//
//    implementation fileTree(dir: 'libs', include: ['*.jar'])

}

// QueryDSL
sourceSets {
    main {
        java {
            srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated/sources/annotationProcessor/java/main", "$projectDir/src/main/avro"]
        }
    }
}


test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }
    systemProperty 'spring.profiles.active', 'gradle-test'
    useJUnitPlatform()
    reports {
        junitXml.destination(file("$buildDir/reports/test/test/junitXml"))
        junitXml.enabled(true)
        html.destination(file("$buildDir/reports/test/test/html"))
        html.enabled(true)
    }
    finalizedBy 'jacocoTestReport'
}

// jacoco
jacoco {
    toolVersion = '0.8.5'
}
jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false
        xml.destination file("$buildDir/reports/jacoco/jacoco.xml")
    }
    finalizedBy 'jacocoTestCoverageVerification'
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            // 'element'가 없으면 프로젝트의 전체 파일을 합친 값을 기준으로 한다.
            limit {
                counter = 'INSTRUCTION'
                // 'counter'를 지정하지 않으면 default는 'INSTRUCTION'
                // 'counter'에서 LINE은 라인 커버리지, INSTRUCTION은 실행되는 바이트 단위의 커버리지
                // 'value'를 지정하지 않으면 default는 'COVEREDRATIO'
                minimum = 0.60
            }
        }
    }
}
task testCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(':test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}

//########## spotbugs ##########//
spotbugs {
    ignoreFailures = false // bug가 발견되면 report만 하고 프로젝트는 계속 진행
    showStackTraces = false
    showProgress = false
    effort = 'max'
    reportLevel = 'low'
//    visitors = [ 'FindSqlInjection', 'SwitchFallthrough' ]
//    omitVisitors = [ 'FindNonShortCircuit' ]
    includeFilter = file("ruleset/findbugs-include_(V0.92)_proj.xml")
    excludeFilter = file("ruleset/findbugs-exclude_(V0.92)_proj.xml")
    excludeFilter = file("ruleset/findbugs-exclude_spadmin.xml")
    reportsDir = file("$buildDir/reports/spotbugs")
    maxHeapSize = '1g'
    extraArgs = ['-nested:false']
    jvmArgs = ['-Duser.language=en']
}

spotbugsTest.enabled(false)
//spotbugsIntegrationTest.enabled(false)

spotbugsMain {
    reports {
        xml.enabled = false
        xml.destination = file("$buildDir/reports/spotbugs")
        html {
            enabled = true
            stylesheet = 'plain.xsl'
        }
    }

    ignoreFailures = false // bug가 발견되면 report만 하고 프로젝트는 계속 진행
}

// SonarLint
//apply from: 'sonarlint.gradle'



tasks.named('test') {
    useJUnitPlatform()
}
